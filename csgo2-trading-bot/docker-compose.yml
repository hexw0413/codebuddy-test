version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: csgo2_postgres
    environment:
      POSTGRES_DB: csgo2_trading
      POSTGRES_USER: csgo2_user
      POSTGRES_PASSWORD: csgo2_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - csgo2_network
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: csgo2_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - csgo2_network
    restart: unless-stopped

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: csgo2_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - csgo2_network
    restart: unless-stopped

  # Go后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: csgo2_backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=csgo2_trading
      - DB_USER=csgo2_user
      - DB_PASSWORD=csgo2_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - csgo2_network
    volumes:
      - ./config:/app/config
    restart: unless-stopped

  # Python数据采集服务
  data-collector:
    build:
      context: ./data-collector
      dockerfile: Dockerfile
    container_name: csgo2_data_collector
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=csgo2_trading
      - DB_USER=csgo2_user
      - DB_PASSWORD=csgo2_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - csgo2_network
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    restart: unless-stopped

  # React前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: csgo2_frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://backend:8080
      - REACT_APP_WS_URL=ws://backend:8080/ws
    depends_on:
      - backend
    networks:
      - csgo2_network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: csgo2_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - csgo2_network
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: csgo2_prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - csgo2_network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: csgo2_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - csgo2_network
    restart: unless-stopped

networks:
  csgo2_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data: